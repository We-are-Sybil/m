x-kafka-common-variables: &kafka-common-env
  KAFKA_PROCESS_ROLES: broker,controller
  KAFKA_CONTROLLER_QUORUM_VOTERS: 1@m-kafka-1:9093,2@m-kafka-2:9093,3@m-kafka-3:9093
  KAFKA_LISTENERS: INTERNAL://0.0.0.0:19092,EXTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
  KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
  CLUSTER_ID: "4L6g3nShT-eMCtK--X86sw"
  KAFKA_NUM_PARTITIONS: 12
  KAFKA_DEFAULT_REPLICATION_FACTOR: 3
  KAFKA_MIN_IN_SYNC_REPLICAS: 2
  KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
  KAFKA_COMPRESSION_TYPE: zstd
  KAFKA_NUM_IO_THREADS: 8
  KAFKA_HEAP_OPTS: "-Xmx2G -Xms2G"
  KAFKA_LOG_RETENTION_HOURS: 168 # Set default retention here

networks:
  m-net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24

volumes:
  m-kafka-data-1:
  m-kafka-data-2:
  m-kafka-data-3:

services:
  m-kafka-1:
    image: apache/kafka:4.0.0
    container_name: m-kafka-1
    hostname: m-kafka-1
    networks:
      m-net:
        ipv4_address: 192.168.100.10
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - m-kafka-data-1:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 1
      <<: *kafka-common-env
      # Separate listeners for internal and external communication
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://m-kafka-1:19092,EXTERNAL://localhost:9092
      KAFKA_NUM_NETWORK_THREADS: 3
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  m-kafka-2:
    image: apache/kafka:4.0.0
    container_name: m-kafka-2
    hostname: m-kafka-2
    networks:
      m-net:
        ipv4_address: 192.168.100.11
    ports:
      - "9094:9092"
      - "9095:9093"
    volumes:
      - m-kafka-data-2:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 2
      <<: *kafka-common-env
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://m-kafka-2:19092,EXTERNAL://localhost:9094
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      - m-kafka-1
    restart: unless-stopped

  m-kafka-3:
    image: apache/kafka:4.0.0
    container_name: m-kafka-3
    hostname: m-kafka-3
    networks:
      m-net:
        ipv4_address: 192.168.100.12
    ports:
      - "9096:9092"
      - "9097:9093"
    volumes:
      - m-kafka-data-3:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 3
      <<: *kafka-common-env
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://m-kafka-3:19092,EXTERNAL://localhost:9096
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      - m-kafka-1
      - m-kafka-2
    restart: unless-stopped

  kafka-init-topics:
    image: apache/kafka:4.0.0
    container_name: kafka-init-topics
    networks:
      - m-net
    command: ["/bin/sh", "-c", "/etc/kafka/secrets/create-topics.sh"]
    volumes:
      - ./config/create-topics.sh:/etc/kafka/secrets/create-topics.sh
    depends_on:
      m-kafka-1:
        condition: service_healthy
      m-kafka-2:
        condition: service_healthy
      m-kafka-3:
        condition: service_healthy
    restart: on-failure

  webhook-service:
    build:
      context: .
      dockerfile: Dockerfile.webhook
    container_name: webhook-service
    networks:
      m-net:
        ipv4_address: 192.168.100.20
    ports:
      - "8000:8000"
    environment:
      # Kafka configuration - note the internal network addresses
      KAFKA_BOOTSTRAP_SERVERS: "m-kafka-1:19092,m-kafka-2:19092,m-kafka-3:19092"
      KAFKA_CONSUMER_GROUP_ID: "webhook-service"
      KAFKA_TIMEOUT_MS: "5000"
      KAFKA_SECURITY_PROTOCOL: "PLAINTEXT"
      
      # WhatsApp webhook configuration
      WEBHOOK_VERIFY_TOKEN: "${WEBHOOK_VERIFY_TOKEN:-dev_verify_token_123}"
      WEBHOOK_ACCESS_TOKEN: "${WEBHOOK_ACCESS_TOKEN:-dev_access_token_456}"
      WEBHOOK_API_VERSION: "${WEBHOOK_API_VERSION:-v23.0}"
      WEBHOOK_PHONE_NUMBER_ID: "${WEBHOOK_PHONE_NUMBER_ID:-106540352242922}"
      WEBHOOK_MAX_FILE_SIZE_MB: "${WEBHOOK_MAX_FILE_SIZE_MB:-25}"
      WEBHOOK_HOST: "0.0.0.0"
      WEBHOOK_PORT: "8000"
      
      # Logging configuration
      RUST_LOG: "info,webhook=debug"
    depends_on:
      kafka-init-topics:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/webhook?hub.mode=subscribe&hub.verify_token=${WEBHOOK_VERIFY_TOKEN:-dev_verify_token_123}&hub.challenge=healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
